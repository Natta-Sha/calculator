import { google } from "googleapis";
import fs from "fs/promises";

const SCOPES = ["https://www.googleapis.com/auth/spreadsheets"];
const CREDENTIALS_PATH = "./oauth2.keys.json"; // —Ç–≤–æ–π —Ñ–∞–π–ª —Å client_id, client_secret
const TOKEN_PATH = "./token.json"; // —Å—é–¥–∞ –∑–∞–ø–∏—à–µ—Ç—Å—è —Ç–æ–∫–µ–Ω

async function authorize() {
  // 1. –ß–∏—Ç–∞–µ–º credentials
  const credentials = JSON.parse(await fs.readFile(CREDENTIALS_PATH, "utf8"));
  const { client_secret, client_id, redirect_uris } = credentials.web;

  // 2. –°–æ–∑–¥–∞–µ–º OAuth2 client
  const oAuth2Client = new google.auth.OAuth2(
    client_id,
    client_secret,
    redirect_uris[0]
  );

  // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: "offline", // –ø–æ–ª—É—á–∏—Ç—å refresh_token
    prompt: "consent", // –≤–∞–∂–Ω–æ: –∏–Ω–∞—á–µ refresh_token –Ω–µ –≤–µ—Ä–Ω–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
    scope: SCOPES,
  });

  console.log("üëâ Open this URL in your browser:\n", authUrl);

  // 4. –°–ª—É—à–∞–µ–º –≤–≤–æ–¥ –∫–æ–¥–∞ –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
  process.stdin.setEncoding("utf8");
  process.stdin.on("data", async (code) => {
    code = code.trim();
    try {
      // 5. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –ø–æ –∫–æ–¥—É
      const { tokens } = await oAuth2Client.getToken(code);
      // 6. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
      await fs.writeFile(TOKEN_PATH, JSON.stringify(tokens));
      console.log("‚úÖ Token saved to", TOKEN_PATH);
      process.exit();
    } catch (err) {
      console.error("‚ùå Error retrieving access token", err);
      process.exit(1);
    }
  });
}

authorize();
